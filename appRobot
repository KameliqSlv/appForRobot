#from http import client
#from tkinter import Label
#from turtle import textinput

from ast import Add
from http import client
from pydoc import cli
from select import select
from kivy.app import App
from kivy.uix.button import Button
from kivy.uix.textinput import TextInput
from kivy.uix.label import Label
#from kivy.uix.widget import Widget
#from kivy.uix.boxlayout import BoxLayout
from kivy.uix.gridlayout import GridLayout
from kivy.uix.image import Image
from kivy.graphics.texture import Texture
from kivy.uix.video import Video
import socket
import cv2
import numpy as np 
import imutils
import struct
import pickle


from matplotlib.pyplot import text, vlines


client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
FORMAT = 'UTF-8'
MESSAGE = ['UP'] 

class MyGridLayout(GridLayout):
    def __init__(self, **kwargs):
        
        super(MyGridLayout, self).__init__(**kwargs)
                
        ##Set columns
        self.cols = 3
        #Add label
        self.add_widget(Label(text = "Write IpAddress: "))
        #Add text input
        self.IPADD = TextInput(multiline = False)
        self.add_widget(self.IPADD)

        #Create button
        self.conBtn = Button(text = "Connect", font_size = 32)
        #bind the button
        self.conBtn.bind(on_press = self.press)
        self.add_widget(self.conBtn)

    ##########
    ##ButtonLine
        self.lineBtn = Button(text = 'Fing Line', font_size = 32)
        self.lineBtn.bind(on_press = self.sent_dataLine)
        self.add_widget(self.lineBtn)

    #####
    ##text box
        self.msgBox = TextInput(multiline = True)
        self.add_widget(self.msgBox)
        

    #######
    ###Disconnect
        self.disBtn = Button(text = 'Disconnect', font_size = 32)
        self.disBtn.bind(on_press = self.sent_dataDIS)
        self.add_widget(self.disBtn)

    #####
    ###UP
        self.add_widget(Label(text = ""))
        self.upBtn = Button(text = 'UP', font_size = 32)
        self.upBtn.bind(on_press = self.sent_dataUP)
        self.add_widget(self.upBtn)
        self.add_widget(Label(text = ""))

    ####
    ##LEFT
        self.leftBtn = Button(text = 'LEFT', font_size = 32)
        self.leftBtn.bind(on_press = self.sent_dataLEFT)
        self.add_widget(self.leftBtn)

    ######
    ##STOP
        self.stopBtn = Button(text = 'STOP', font_size = 32)
        self.stopBtn.bind(on_press = self.sent_dataSTOP)
        self.add_widget(self.stopBtn)

    #######
    ##RIGHT
        self.rightBtn = Button(text = 'RIGHT', font_size = 32)
        self.rightBtn.bind(on_press = self.sent_dataRight)
        self.add_widget(self.rightBtn)
    
    #######
    ##DOWN
        self.add_widget(Label(text = ""))
        self.downBtn = Button(text = 'DOWN', font_size = 32)
        self.downBtn.bind(on_press = self.sent_dataDOWN)
        self.add_widget(self.downBtn)
        self.add_widget(Label(text = ""))

    
    def press(self,instance):
        IPADD = self.IPADD.text
        ADDR = (IPADD, 27271)
        client.connect(ADDR)
        print('client connect')
        msgBox = self.msgBox
        msgBox.text = ('')
        msg = client.recv(1024)
        
        msgBox.text = ('Jonny: ' + msg.decode())

        #img = self.image
        #data = b""
        #playload_size = struct.calcsize(">L")
        
        #while len(data) < playload_size:
        #     data += client.recv(4096)
        # receive image row data form client socket
        #packed_msg_size = data[:playload_size]
        #data = data[playload_size:]
        #msg_size = struct.unpack(">L", packed_msg_size)[0]
        #while len(data) < msg_size:
        #    data += client.recv(4096)
        #frame_data = data[:msg_size]
        #data = data[msg_size:]
        # unpack image using pickle 
        #frame=pickle.loads(frame_data, fix_imports=True, encoding="bytes")
        #frame = cv2.imdecode(frame, cv2.IMREAD_COLOR)
        #buffer = frame.clip(frame,0).tobytes()
        #cv2.imshow('frame',frame)
        #frmae = Video(source = sys.argv[1], state = 'play')

        #texTure = Texture.create(size = (frame.shape[1], frame.shape[0]), colorfmt = 'bgr')
        #texTure.blit_buffer(buffer, colorfmt = 'bgr', bufferfmt = 'ubyte')
        #self.image.texture = texTure
        

    
        #ret, frame = self.cap.read()
        #self.image_frame = frame
        #buffer = cv2.flip(frame, 0).tostring()
        #texTure = Texture.create(size = (frame.shape[1], frame.shape[0]), colorfmt = 'bgr')
        #texTure.blit_buffer(buffer, colorfmt = 'bgr', bufferfmt = 'ubyte')
        #self.image.texture = texTure



    
    def sent_dataLine(self, instance):
        msgBox = self.msgBox
        msgBox.text = ('')
        m = self.message = 'Find'
        client.send(self.message.encode())
        print(m)
        msg = client.recv(1024)
        
        msgBox.text = ('Jonny: ' + msg.decode())
        


        
    def sent_dataDIS(self, instance):
        msgBox = self.msgBox
        msgBox.text = ('')
        m = self.message = '!DISCONNECT'
        client.send(self.message.encode())
        msg = client.recv(1024)
        
        msgBox.text = ('Jonny: ' + msg.decode())
        IPADD = self.IPADD
        IPADD.text = (' ')
        client.close()
        print(m)
        

        
        
        
        


    def sent_dataUP(self, instance):
        msgBox = self.msgBox
        msgBox.text = ('')
        m = self.message = 'UP'
        client.send(self.message.encode())
        print(m)

    def sent_dataLEFT(self, instance):
        msgBox = self.msgBox
        msgBox.text = ('')
        m = self.message = 'LEFT'
        client.send(self.message.encode())
        print(m)

    def sent_dataSTOP(self, instance):
        msgBox = self.msgBox
        msgBox.text = ('')
        m = self.message = 'STOP'
        client.send(self.message.encode())
        print(m)
    
    def sent_dataRight(self, instance):
        msgBox = self.msgBox
        msgBox.text = ('')
        m = self.message = 'RIGHT'
        client.send(self.message.encode())
        print(m)
    
    def sent_dataDOWN(self, instance):
        msgBox = self.msgBox
        msgBox.text = ('')
        m = self.message = 'DOWN'
        client.send(self.message.encode())
        print(m)




class forRobotApp(App):
    def build(self):
        
        
        return MyGridLayout()

    

if __name__ == '__main__':
    forRobotApp().run()
    cv2.destroyAllWindows()
